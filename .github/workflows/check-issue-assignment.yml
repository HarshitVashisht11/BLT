name: Check Issue Assignment

on:
  pull_request:
    types: [opened, synchronize, reopened, edited]

jobs:
  check-issue-assignment:
    runs-on: ubuntu-latest
    permissions:
      issues: read
      pull-requests: write
    steps:
      - name: Check Issue Assignment
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const pr = context.payload.pull_request;
            const prAuthor = pr.user.login;
            
            console.log(`Processing PR #${pr.number} from ${prAuthor}`);
            
            // Regular expressions to find issue references
            // This captures common formats like "fixes #123", "closes #123", "resolves #123", etc.
            const issueReferenceRegex = /(?:close[sd]?|fix(?:e[sd])?|resolve[sd]?)\s+#(\d+)/gi;
            const directReferenceRegex = /#(\d+)/g;
            
            let body = pr.body || '';
            let matches = [];
            let issueMatch;
            
            // First look for specific closing keywords
            while ((issueMatch = issueReferenceRegex.exec(body)) !== null) {
              matches.push(parseInt(issueMatch[1], 10));
            }
            
            // If no matches with closing keywords, look for any issue reference
            if (matches.length === 0) {
              while ((issueMatch = directReferenceRegex.exec(body)) !== null) {
                matches.push(parseInt(issueMatch[1], 10));
              }
            }
            
            if (matches.length === 0) {
              console.log('No issue references found in PR description');
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr.number,
                body: '⚠️ This PR does not reference any issue. Please link this PR to an issue using keywords like "Fixes #issue_number" in the PR description.'
              });
              return;
            }
            
            console.log(`Found issue references: ${matches.join(', ')}`);
            
            // Check each referenced issue
            let hasAssignedIssue = false;
            let notAssignedIssues = [];
            
            for (const issueNumber of matches) {
              try {
                const { data: issue } = await github.rest.issues.get({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issueNumber
                });
                
                // Check if the PR author is assigned to this issue
                const isAssigned = issue.assignees && 
                                  issue.assignees.some(assignee => assignee.login === prAuthor);
                
                if (isAssigned) {
                  hasAssignedIssue = true;
                  console.log(`Issue #${issueNumber} is assigned to PR author ${prAuthor}`);
                } else {
                  notAssignedIssues.push(issueNumber);
                  console.log(`Issue #${issueNumber} is NOT assigned to PR author ${prAuthor}`);
                }
              } catch (error) {
                console.log(`Error getting issue #${issueNumber}: ${error}`);
                // If we can't verify the issue, we'll assume it's not properly assigned
                notAssignedIssues.push(issueNumber);
              }
            }
            
            if (!hasAssignedIssue) {
              // All referenced issues are not assigned to the author, close the PR
              console.log('Closing PR: No referenced issues are assigned to the PR author');
              
              // Create a comment explaining why the PR is being closed
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr.number,
                body: `⚠️ This PR has been automatically closed because none of the referenced issues (${notAssignedIssues.map(i => '#' + i).join(', ')}) are assigned to you (${prAuthor}).\n\n` +
                      'Please make sure you are assigned to the issue before submitting a pull request.\n\n' + 
                      'If you believe this is a mistake, please ask a maintainer to review the situation.'
              });
              
              // Close the pull request
              await github.rest.pulls.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: pr.number,
                state: 'closed'
              });
            } else {
              console.log('PR check passed: At least one referenced issue is assigned to the PR author');
            }
